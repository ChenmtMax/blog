/**
 * diff 算法
 * updateChildren() 传入新旧节点，调用 sameVnode函数 进行比对。
 * 1、先做最外层的比对 sameVode函数（判断新旧节点是否值得比较，不值得则将旧节点整个换掉），比对 key&&注释节点&&具体信息（事件属性等）&&input标签还会比较类型。
 * 2、新旧节点值得比对时，继续递归查找。（从这一层开始就不会再往后继续追踪了）
 *      依据：比如新节点 div 和 旧节点 P标签名都不一样了就不值得深入了。
 *
 * 值得比对：（比如 新旧节点的 tag值、key值都一样）
 *      1、查找下一个自己 Children 的节点，执行 patchVnode函数。
 *          - 值得深入时，每个子节点都执行该函数进行比对。
 *          - 比较新旧节点，以新节点身上所带有的为主进行节点增删改。
 *      2、判断是否指向同一对象，是则 return。
 *      3、找到对应的真实 dom，称为 elm。
 *      4、如果他们都有 文本节点并且不相等，那么将 elm 的文本节点设置为 Vnode的 文本节点。
 *      5、如果 oldVnode 有子节点而 Vnode没有，则删除 elm 的子节点。
 *      6、如果 oldVnode 没有子节点而 Vnode 有，则将 Vnode真实化后添加到 elm 中。
 *      7、如果都有子节点，则回到 updateChilren函数继续比较节点。
 */